#pragma kernel CreatePathLodList
#pragma kernel CreateBaseNode
#pragma kernel CreateNodeLodMap
#pragma kernel FrustumCull
#pragma kernel NodeConvertToPatch
#pragma kernel HizCull
#pragma kernel GrassPatchFilter



#pragma multi_compile_local __ _REVERSE_Z
#pragma multi_compile_local __ _OPENGL_ES_3
#pragma multi_compile_local __ ENABLE_FRUS_CULL
#pragma multi_compile_local __ ENABLE_HIZ_CULL

#include "./TerrainDataStructDefine.hlsl"
AppendStructuredBuffer<NodePatchData> _AppendTempList;
AppendStructuredBuffer<NodePatchData> _FinalPatchList;
ConsumeStructuredBuffer<NodePatchData> _ConsumeList;

Texture2D<float2>_MinMaxHeightMap;
uniform float4 _GlobalValues[10];
uniform int _NodeIndexs[10];
uniform uint _CurrentLOD;
RWTexture2D<float> _SectorLODMap;
RWBuffer<uint>_NodeBrunchList;
int NoHizCull;

//HizCull
uniform float4x4 _VPMatrix;
Texture2D<float> _HizMap;
RWBuffer<uint> _InstanceArgs;
RWTexture2D<float4> _ResultPatchMap;

#include "./GPUTerrainFunc.hlsl"


int GetNodeIndex(BaseData baseData, uint LOD, float2 nodeXY) {
    return _NodeIndexs[LOD] + nodeXY.y + nodeXY.x * GetNodeNumInLod(baseData, LOD);
}

uint IsNeedQuad(BaseData baseData, NodePatchData nodeData)
{
    if (nodeData.LOD == 0)
        return 0;
    float3 cameraPos = baseData.cameraWorldPos;
    float fov = baseData.fov;
    float nodeSize = GetNodeSizeByLod(baseData, nodeData.LOD);
    float2 nodePos = GetNodeCenterPos(baseData, nodeData);

    float dis = distance(cameraPos, float3(nodePos.x, nodeData.boundsMax.y, nodePos.y));
    float result = baseData.lodJudgeFector * nodeSize / (dis * fov);
    return step(1, result);
}





inline void GetFrustumPlane(float4 valueList[10], inout float4 frustumPlane[6])
{
    frustumPlane[0] = valueList[4];
    frustumPlane[1] = valueList[5];
    frustumPlane[2] = valueList[6];
    frustumPlane[3] = valueList[7];
    frustumPlane[4] = valueList[8];
    frustumPlane[5] = valueList[9];
}

bool IsOutSidePlane(float4 plane, float3 position)
{
    return dot(plane.xyz, position) + plane.w < 0;
}


//true: avalible
//flase: culled
bool FrustumCullBound(float3 minPos, float3 maxPos, float4 planes[6])
{
    [unroll]
    for (int i = 0; i < 6; i++)
    {
        float3 p = minPos;
        float3 normal = planes[i].xyz;
        if (normal.x >= 0)
            p.x = maxPos.x;
        if (normal.y >= 0)
            p.y = maxPos.y;
        if (normal.z >= 0)
            p.z = maxPos.z;
        if (IsOutSidePlane(planes[i], p))
        {
            return false;
        }
    }
    return true;
}



bool CompareDepth(float HizMapDepth, float obj_uvd_depth)
{
#if _REVERSE_Z
    HizMapDepth = 1 - HizMapDepth;
#endif
    return HizMapDepth >= obj_uvd_depth;
}


inline float3 CalPointUVD(float4x4 _VPMatrix, float3 pos)
{
    float4 clipSpace = mul(_VPMatrix, float4(pos, 1.0));
    float3 ndc = clipSpace.xyz / clipSpace.w;

    float3 uvd;
    uvd.xy = (ndc.xy + 1) * 0.5;
    uvd.z = ndc.z;
#if _OPENGL_ES_3
    uvd.z = (ndc.z + 1) * 0.5;
#endif
#if _REVERSE_Z
    uvd.z = 1 - uvd.z;
#endif
    return uvd;
}

Bound
CalBoundUVD(BaseData
    baseData,
    float3 minPos, float3 maxPos)
{
    float3 pos0 = float3(minPos.x, minPos.y, minPos.z);
    float3 pos1 = float3(minPos.x, minPos.y, maxPos.z);
    float3 pos2 = float3(minPos.x, maxPos.y, minPos.z);
    float3 pos3 = float3(maxPos.x, minPos.y, minPos.z);
    float3 pos4 = float3(maxPos.x, maxPos.y, minPos.z);
    float3 pos5 = float3(maxPos.x, minPos.y, maxPos.z);
    float3 pos6 = float3(minPos.x, maxPos.y, maxPos.z);
    float3 pos7 = float3(maxPos.x, maxPos.y, maxPos.z);

    float3 uvd0 = CalPointUVD(_VPMatrix, pos0);
    float3 uvd1 = CalPointUVD(_VPMatrix, pos1);
    float3 uvd2 = CalPointUVD(_VPMatrix, pos2);
    float3 uvd3 = CalPointUVD(_VPMatrix, pos3);
    float3 uvd4 = CalPointUVD(_VPMatrix, pos4);
    float3 uvd5 = CalPointUVD(_VPMatrix, pos5);
    float3 uvd6 = CalPointUVD(_VPMatrix, pos6);
    float3 uvd7 = CalPointUVD(_VPMatrix, pos7);

    float3 minPosUVD = min(min(min(uvd0, uvd1), min(uvd2, uvd3)), min(min(uvd4, uvd5), min(uvd6, uvd7)));
    float3 maxPosUVD = max(max(max(uvd0, uvd1), max(uvd2, uvd3)), max(max(uvd4, uvd5), max(uvd6, uvd7)));
    Bound bound;
    bound.maxPos = clamp(maxPosUVD, 0, 1);
    bound.minPos = clamp(minPosUVD, 0, 1);
    return bound;
}

//true: avalible
//flase: culled
bool HizCullPoint(int mip, uint2 mapsize_mip, float3 pos)
{
    float2 mip_uv_step = float2(1.0 / mapsize_mip.x, 1.0 / mapsize_mip.y);
    float obj_depth = pos.z;
    //vulkan may be wrong
    uint2 ptXYInMap = uint2(floor(pos.x / mip_uv_step.x), floor(pos.y / mip_uv_step.y));
    ptXYInMap = clamp(ptXYInMap, 0, mapsize_mip - 1);
    float scene_depth = _HizMap.mips[mip][ptXYInMap];
    return CompareDepth(scene_depth, obj_depth);
}


int GetSectorLod(BaseData baseData, int2 sectorXY, int LOD)
{
    int sectornum = GetNodeNumInLod(baseData, 0);
    if (sectorXY.x < 0 || sectorXY.y < 0 || sectorXY.x >= sectornum || sectorXY.y >= sectornum)
    {
        return LOD;
    }
    int result = round(_SectorLODMap[sectorXY] * baseData.maxLOD);
    return result;
}

//get patchData around(left,down,right,up) lod 
void GetLodTrans(inout NodePatchData patchData, BaseData baseData)
{
    patchData.LodTrans = 0;
    int lod = patchData.LOD;
    int2 sectorXY = patchData.nodeXY * (1 << lod);

    if (patchData.patchXY.x == 0)
    {
        patchData.LodTrans.x = clamp(GetSectorLod(baseData, sectorXY + int2(-1, 0), lod) - lod, 0, baseData.maxLOD);
    }
    if (patchData.patchXY.y == 0)
    {
        patchData.LodTrans.y = clamp(GetSectorLod(baseData, sectorXY + int2(0, -1), lod) - lod, 0, baseData.maxLOD);
    }
    if (patchData.patchXY.x == baseData.nodeDevidePatchNum - 1)
    {
        patchData.LodTrans.z = clamp(GetSectorLod(baseData, sectorXY + int2(1 << lod, 0), lod) - lod, 0, baseData.maxLOD);
    }
    if (patchData.patchXY.y == baseData.nodeDevidePatchNum - 1)
    {
        patchData.LodTrans.w = clamp(GetSectorLod(baseData, sectorXY + int2(0, 1 << lod), lod) - lod, 0, baseData.maxLOD);
    }
}


bool HizCullBound(BaseData baseData, float3 minPos, float3 maxPos)
{
    float3 pos0 = minPos;
    float3 pos7 = maxPos;
    Bound boundUVD = CalBoundUVD(baseData, minPos, maxPos);//[0,1]
    float2 objsize = float2(boundUVD.maxPos.x - boundUVD.minPos.x, boundUVD.maxPos.y - boundUVD.minPos.y);//[0,1]
    float objDepth = boundUVD.minPos.z;//[0,1]
    uint2 hizMapSize = baseData.hizMapSize;

    int sample_mip = max(objsize.x * hizMapSize.x, objsize.y * hizMapSize.y);
    sample_mip = clamp(ceil(log2(sample_mip)), 0, log2(min(hizMapSize.x, hizMapSize.y))); //this is importent, mean hizmip max mip level

    float3 boundpos0 = float3(boundUVD.minPos.x, boundUVD.minPos.y, objDepth);
    float3 boundpos1 = float3(boundUVD.minPos.x, boundUVD.maxPos.y, objDepth);
    float3 boundpos2 = float3(boundUVD.maxPos.x, boundUVD.minPos.y, objDepth);
    float3 boundpos3 = float3(boundUVD.maxPos.x, boundUVD.maxPos.y, objDepth);
    uint2 mapsize_mip = uint2(hizMapSize.x >> sample_mip, hizMapSize.y >> sample_mip);//hiz map resolution of mip
    bool avalible = HizCullPoint(sample_mip, mapsize_mip, boundpos0)
        || HizCullPoint(sample_mip, mapsize_mip, boundpos1)
        || HizCullPoint(sample_mip, mapsize_mip, boundpos2)
        || HizCullPoint(sample_mip, mapsize_mip, boundpos3);
    return avalible;
}
void CalNodeBounds(BaseData baseData, inout NodePatchData nodeData) {
    float2 height = _MinMaxHeightMap.mips[nodeData.LOD + 3][nodeData.nodeXY].xy;
    float2 minMaxHeight = (height - 0.5) * 2 * baseData.worldHeightScale;
    float nodeSize = GetNodeSizeByLod(baseData, nodeData.LOD);
    nodeData.boundsMax = float3(nodeSize * 0.5, minMaxHeight.y, nodeSize * 0.5);
    nodeData.boundsMin = float3(nodeSize * -0.5, minMaxHeight.x, nodeSize * -0.5);
}


[numthreads(1,1,1)]
void CreateBaseNode(uint3 id : SV_DispatchThreadID)
{
    BaseData baseData = GenerateBaseData(_GlobalValues);
    NodePatchData nodeData = CreateEmptyNodePatchData();
    nodeData.nodeXY = id.xy;
    nodeData.LOD = baseData.maxLOD;
    _AppendTempList.Append(nodeData);
}



[numthreads(1,1,1)]
void CreatePathLodList (uint3 id : SV_DispatchThreadID)
{
    BaseData baseData = GenerateBaseData(_GlobalValues);
    //Get BaseNodeData(5x5)
    NodePatchData nodeData = _ConsumeList.Consume();

    //Set Data
    uint2 nodeXY = nodeData.nodeXY;
    nodeData.LOD = _CurrentLOD;
    CalNodeBounds(baseData,nodeData);
    int nodeIndex=GetNodeIndex(baseData, nodeData.LOD,nodeXY);
    uint needQuad = IsNeedQuad(baseData, nodeData);
    
    if(needQuad==1)
    {
        NodePatchData nodeData0=CreateEmptyNodePatchData();
        NodePatchData nodeData1=CreateEmptyNodePatchData();
        NodePatchData nodeData2=CreateEmptyNodePatchData();
        NodePatchData nodeData3=CreateEmptyNodePatchData();

        nodeData0.nodeXY = nodeXY * 2;
        nodeData1.nodeXY = nodeXY * 2 + uint2(0, 1);
        nodeData2.nodeXY = nodeXY * 2 + uint2(1, 0);
        nodeData3.nodeXY = nodeXY * 2 + uint2(1, 1);

        _AppendTempList.Append(nodeData0);
        _AppendTempList.Append(nodeData1);
        _AppendTempList.Append(nodeData2);
        _AppendTempList.Append(nodeData3);

         _NodeBrunchList[nodeIndex] = 1;
         
    }
    else
    {
        _FinalPatchList.Append(nodeData);
        _NodeBrunchList[nodeIndex]=2;
    }

}

[numthreads(8, 8, 1)]
void CreateNodeLodMap(uint3 id :SV_DispatchThreadID)
{
    BaseData baseData = GenerateBaseData(_GlobalValues);
    uint2 sectorID = id.xy;
    for (int i = baseData.maxLOD; i > -0; i--)
    {
        int2 nodeXY = sectorID >> i;
        uint nodeIndex = GetNodeIndex(baseData, i, nodeXY);
        uint isbrunch = _NodeBrunchList[nodeIndex];
        if (isbrunch == 2)
        {
            _SectorLODMap[sectorID] = i * 1.0 / baseData.maxLOD;
            return;
        }
    }
}

[numthreads(1,1,1)]
void FrustumCull(uint3 groupId : SV_GroupID)
{
    BaseData baseData = GenerateBaseData(_GlobalValues);
    NodePatchData nodeData = _ConsumeList.Consume();

    float2 center = GetNodeCenterPos(baseData, nodeData);
    float3 center_y0 = float3(center.x, 0, center.y);
    float4 frustumPlane[6];
    GetFrustumPlane(_GlobalValues, frustumPlane);
    bool frusAvalible = true;
#if ENABLE_FRUS_CULL
    frusAvalible = FrustumCullBound(center_y0 + nodeData.boundsMin, center_y0 + nodeData.boundsMax, frustumPlane);
#endif
    if (frusAvalible)
    {
        _AppendTempList.Append(nodeData);
    }
}

[numthreads(1,1,1)]
void NodeConvertToPatch(uint3 id:SV_GroupThreadID) 
{
    NodePatchData nodeData = _ConsumeList.Consume();
    BaseData baseData = GenerateBaseData(_GlobalValues);
    int patchNum = baseData.nodeDevidePatchNum;

    for (int i = 0; i < patchNum; i++) 
    {
        for (int j = 0; j < patchNum; j++) 
        {
            NodePatchData patchData = CreateEmptyNodePatchData();
            patchData.nodeXY = nodeData.nodeXY;
            patchData.LOD = nodeData.LOD;
            patchData.patchXY = uint2(i, j);
            _AppendTempList.Append(patchData);
        }
    }
}


[numthreads(1,1,1)]
void HizCull(uint3 id:SV_DispatchThreadID) 
{
    BaseData baseData = GenerateBaseData(_GlobalValues);

    NodePatchData patchData = _ConsumeList.Consume();

    float patchSize = GetPatchSizeInLod(baseData, patchData.LOD);
    float2 nodePos = GetNodeCenterPos(baseData, patchData);
    float2 patchPosInNode = GetPatchPosInNode(baseData, patchData.patchXY, patchData.LOD);

    float2 patchPos = nodePos + patchPosInNode;

    uint2 patchUV = patchData.nodeXY * baseData.nodeDevidePatchNum + patchData.patchXY;

    float2 heightRange = (_MinMaxHeightMap.mips[patchData.LOD][patchUV].xy - 0.5) * 2 * baseData.worldHeightScale;

    GetLodTrans(patchData, baseData);

    float3 boundMin = float3(patchPos.x - patchSize * 0.5, heightRange.x, patchPos.y - patchSize * 0.5);
    float3 boundMax = float3(patchPos.x + patchSize * 0.5, heightRange.y, patchPos.y + patchSize * 0.5);

    bool isHizAvalible = true;
#if ENABLE_HIZ_CULL
    isHizAvalible = HizCullBound(baseData, boundMin, boundMax);
#endif
    if (isHizAvalible == false)
    {
        return;
    }
    _AppendTempList.Append(patchData);
    uint currentIndex;
    InterlockedAdd(_InstanceArgs[1], 1, currentIndex);
    uint2 pixXY;
    pixXY.y = currentIndex * 2 / 512;
    pixXY.x = currentIndex * 2 - pixXY.y * 512;

    float4 pix0, pix1;
    pix0.x = patchData.nodeXY.x;
    pix0.y = patchData.nodeXY.y;
    pix0.z = patchData.patchXY.x * 100 + patchData.patchXY.y;
    pix0.w = patchData.LOD;
    pix1 = patchData.LodTrans;
    _ResultPatchMap[pixXY] = pix0;
    _ResultPatchMap[pixXY + uint2(1, 0)] = pix1;
}

Texture2D<float4>_GrassMaskSplatMap;
[numthreads(1, 1, 1)]
void GrassPatchFilter(uint3 id : SV_DispatchThreadID)
{
    BaseData baseData = GenerateBaseData(_GlobalValues);
    NodePatchData patchData = _ConsumeList.Consume();
    uint2 patchUV = patchData.nodeXY * baseData.nodeDevidePatchNum + patchData.patchXY;
    float grassMask = _GrassMaskSplatMap.mips[patchData.LOD][patchUV].b;
    if (grassMask >0.05) {
        _AppendTempList.Append(patchData);
    }
}